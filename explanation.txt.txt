This project was made using .NET MVC and no other external services. No database connection was made but it was assumed that the XML file is used as a database. The XML is made out of Clients. Each client contains an HTML template and Marketing data in a JSON format. The Marketing data contains info such as FirstName, LastName, Email etc. The HTML template is a template of the following structure: "Hello {{FirstName}}, {{LastName}}. Your {{Email}} ... etc.". For the solution, 3 classes were made:
	- EmailContent;
	- EmailConfiguration;
	- Email;
The EmailContent class is a class responsible for making the body of the email message. It receives the path to the HTML template and the marketing JSON data from the XML file. This class parses the JSON object, reads the HTML and replaces all keywords (such as {{FirstName}}) with its corresponding data from the JSON object. In this case we assume that the {{FirstName}} as a keyword should be replaced with the JSON["FirstName"] data or the name of the keyword between the braces should be the same as the key of the object. After this function executes, we should expect to get a template like "Hello John, Doe. Your john.doe@aoi.com ...". Before hitting this point, we check for a null values in the way and return null if any are met.
The EmailConfiguration class is a class responsible for configuring the email. In this class we set the senderMail, receiverMail, subject and an instance of the EmailContent class which is the emailBody in this case. This class has only one function and that is to send an email. The actual sending of the email isn't implemented in this case and I used a print statements for the sake of verifying the correctness of the code.
The third and final class is the Email class. This class is a container or simulation of a Queue message container. The Email class stores the EmailConfigurations and has one function called start_marketing_campaign(). This function iterates through EmailConfiguration instances and runs the instance.sendEmail() function. This process is parallelized using the Parallel.ForEach() function. 
I used one Controller and three Razor pages. The simulation is made out of two stores, market store and a book store. For each of these stores there is a tab called Market Store and Book Store. There's also a third tab called Admin UI. The store pages contain a small chunk of text and a button. The Admin UI contains buttons for (all) both of the stores. The button itself is the event trigger which loads the XML file (it'll read the market.xml if Market store button was hit or books.xml if Book store button was hit), goes through it, builds the EmailContent instance, builds the EmailConfiguration instance and stores it into the Email container. At the end of it, start_marketing_campaign() is invoked in the background using parallel threads.

https://github.com/martinq-commits/MediaTask